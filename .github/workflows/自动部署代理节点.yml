name: 自动部署代理到SAP

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      type:
        description: '选择部署的节点类型'
        required: true
        default: 'Argo隧道CDN'
        type: choice
        options:
          - ws直连
          - xhttp直连
          - Argo隧道CDN
      region:
        description: '选择部署区域'
        required: true
        default: 'US(free)'
        type: choice
        options:
          #  免费区域
          - SG(free)  # azure新加披
          - US(free)  # aws美国    
          # AWS 区域
          - AWS-AU(Sydney)
          - AWS-BR(São Paulo)
          - AWS-KR(Seoul)
          - AWS-CA(Montreal)
          - AWS-US(VA)
          - AWS-US(OR)
          - AWS-EU(Frankfurt)
          - AWS-JP(Tokyo)
          - AWS-SG(Singapore)
          # GCP 区域
          - GCP-AU(Sydney)
          - GCP-BR(São Paulo)
          - GCP-US(IA)
          - GCP-EU(Frankfurt)
          - GCP-JP(Osaka)
          - GCP-JP(Tokyo)
          - GCP-IL(Tel Aviv)
          - GCP-IN(Mumbai)
          - GCP-KSA(Dammam)
          # Azure 区域
          - Azure-AU(Sydney)
          - Azure-BR(São Paulo)
          - Azure-CA(Montreal)
          - Azure-US(VA)
          - Azure-US(WA)
          - Azure-EU(Netherlands)
          - Azure-JP(Tokyo)
          - Azure-SG(Singapore)
          # SAP Neo 区域
          - Neo-UAE(Dubai)
          - Neo-KSA(Riyadh)
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  MEMORY: 256M

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: Determine CF API endpoint and app name
      run: |
        # 设置API端点和生成随机字符串
        RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
        
        case "${{ github.event.inputs.region }}" in
          # 免费区域
          "SG(free)")
            echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=free-sg$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "US(free)")
            echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=free-us$RANDOM_STR" >> $GITHUB_ENV
            ;;
          # AWS 区域
          "AWS-AU(Sydney)")
            echo "CF_API=https://api.cf.ap10.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-au$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-BR(São Paulo)")
            echo "CF_API=https://api.cf.br10.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-br$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-KR(Seoul)")
            echo "CF_API=https://api.cf.ap12.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-kr$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-CA(Montreal)")
            echo "CF_API=https://api.cf.ca10.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-ca$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-US(VA)")
            echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-usva$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-US(OR)")
            echo "CF_API=https://api.cf.us11.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-usor$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-EU(Frankfurt)")
            echo "CF_API=https://api.cf.eu10-005.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-eu$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-JP(Tokyo)")
            echo "CF_API=https://api.cf.jp10.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-jp$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "AWS-SG(Singapore)")
            echo "CF_API=https://api.cf.ap11.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=aws-sg$RANDOM_STR" >> $GITHUB_ENV
            ;;
          
          # GCP 区域
          "GCP-AU(Sydney)")
            echo "CF_API=https://api.cf.ap30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-au$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-BR(São Paulo)")
            echo "CF_API=https://api.cf.br30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-br$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-US(IA)")
            echo "CF_API=https://api.cf.us30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-us$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-EU(Frankfurt)")
            echo "CF_API=https://api.cf.eu30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-eu$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-JP(Osaka)")
            echo "CF_API=https://api.cf.jp30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-jpo$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-JP(Tokyo)")
            echo "CF_API=https://api.cf.jp31.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-jpt$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-IL(Tel Aviv)")
            echo "CF_API=https://api.cf.il30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-il$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-IN(Mumbai)")
            echo "CF_API=https://api.cf.in30.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-in$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "GCP-KSA(Dammam)")
            echo "CF_API=https://api.cf.sa31.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=gcp-sa$RANDOM_STR" >> $GITHUB_ENV
            ;;
          
          # Azure 区域
          "Azure-AU(Sydney)")
            echo "CF_API=https://api.cf.ap20.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-au$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-BR(São Paulo)")
            echo "CF_API=https://api.cf.br20.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-br$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-CA(Montreal)")
            echo "CF_API=https://api.cf.ca20.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-ca$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-US(VA)")
            echo "CF_API=https://api.cf.us21.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-va$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-US(WA)")
            echo "CF_API=https://api.cf.us20.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-wa$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-EU(Netherlands)")
            echo "CF_API=https://api.cf.eu20-001.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-eu$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-JP(Tokyo)")
            echo "CF_API=https://api.cf.jp20.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-jp$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Azure-SG(Singapore)")
            echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=az-sg$RANDOM_STR" >> $GITHUB_ENV
            ;;
          
          # SAP Neo 区域
          "Neo-UAE(Dubai)")
            echo "CF_API=https://api.cf.neo-ae1.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=neo-uae$RANDOM_STR" >> $GITHUB_ENV
            ;;
          "Neo-KSA(Riyadh)")
            echo "CF_API=https://api.cf.neo-sa1.hana.ondemand.com" >> $GITHUB_ENV
            echo "APP_NAME=neo-ksa$RANDOM_STR" >> $GITHUB_ENV
            ;;
        esac
        
        # 如果用户提供了应用名称，则使用用户提供的
        if [ -n "${{ github.event.inputs.app_name }}" ]; then
          echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        fi
        
        # 如果自定义了docker镜像变量则使用定义的，否则按照选择的
        if [[ -n "${{ secrets.DOCKER_IMAGE }}" ]]; then
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_ENV
        else
          if [ "${{ github.event.inputs.type }}" = "ws直连" ]; then
            echo "DOCKER_IMAGE=ghcr.io/eooce/ws:latest" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.type }}" = "xhttp直连" ]; then
            echo "DOCKER_IMAGE=ghcr.io/eooce/goxhttp:latest" >> $GITHUB_ENV
          else 
            echo "DOCKER_IMAGE=ghcr.io/eooce/nodejs:main" >> $GITHUB_ENV
          fi
        fi
        
        echo "使用API端点: $CF_API"
        echo "应用名称: $APP_NAME"
        echo "部署类型: ${{ env.DOCKER_IMAGE }}"

    - name: Login to Cloud Foundry
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"

        # 获取组织列表
        ORG=$(cf orgs | sed -n '4p')
        echo "Selected org: $ORG"
        echo "ORG=$ORG" >> $GITHUB_ENV

        # 获取空间列表
        SPACE=$(cf spaces | sed -n '4p')
        echo "Selected space: $SPACE"
        echo "SPACE=$SPACE" >> $GITHUB_ENV

        # 使用获取的组织和空间重新登录
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

    - name: Deploy application
      run: |
        if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k 256M --health-check-type port; then
          echo "Deployment successful"
        else
          cf delete ${{ env.APP_NAME }} -r -f
          echo "伙计,没资源了,部署失败,请明天早上8:20至9:00再尝试部署,已清理失败部署残留"
          exit 1
        fi
        
    - name: Set environment variables
      run: |
        # 基础环境变量
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"
        cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

        # 可选：从文件读取环境变量(如果存在)
        if [ -f .env ]; then
          while IFS= read -r line; do
            if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
              IFS='=' read -r key value <<< "$line"
              cf set-env ${{ env.APP_NAME }} "$key" "$value"
            fi
          done < .env
        fi

        # 如果 DOCKER_IMAGE 中否包含 xhttp、goxhttp、ws 等关键词说明为直连镜像
        if [[ "${{ env.DOCKER_IMAGE }}" =~ (xhttp|goxhttp|ws) ]]; then
          # 获取应用路由
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            echo "设置 DOMAIN 环境变量为: $ROUTE"
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
          else
            echo "⚠️ 未找到应用路由，无法设置 DOMAIN,请手动将节点里的address、host和sni改为应用域名"
          fi
        fi
        
    - name: Restage application
      run: |
        cf restage ${{ env.APP_NAME }}

    - name: Verify deployment
      run: |
        cf app ${{ env.APP_NAME }}
        echo "Deployment completed successfully!"

    - name: 详细部署信息
      run: |
        echo "🚀 部署完成！详细信息如下："
        echo "区域(Region): ${{ github.event.inputs.region }}"
        echo "组织(ORG): ${{ env.ORG }}"
        echo "空间(SPACE): ${{ env.SPACE }}"
        echo "应用名称(App Name): ${{ env.APP_NAME }}"

        # 获取应用路由
        ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        if [ -n "$ROUTE" ]; then
          echo "应用 URL (APP_URL): https://$ROUTE"
        else
          echo "⚠️ 未找到应用路由，请检查部署状态。"
        fi
